{"version":3,"sources":["Components/Home/Home.js","Components/DrawerToggler/DrawerToggler.js","Components/Navbar/Navbar.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["home","react_default","a","createElement","className","drawerToggler","props","onClick","click","navbar","DrawerToggler_DrawerToggler","drawerToggleHandler","Footer","App","state","sideDrawerOpened","_this","setState","prevState","Navbar_Navbar","this","Home_Home","Components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAaeA,SATF,kBACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAhB,oBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,4BAAhB,mMCISC,SARO,SAAAC,GAAK,OACzBL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4BG,QAASD,EAAME,OAC3DP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCCgBJK,SAlBA,SAAAH,GAAK,OAClBL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAACO,EAAD,CAAeF,MAAOF,EAAMK,uBAE9BV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sCAAd,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sCAAd,aACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sCAAd,WACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sCAAd,8BCAKQ,SAZA,WACb,OACAX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAf,iCCoBSS,oNArBbC,MAAQ,CACNC,kBAAkB,KAGpBJ,oBAAsB,WACpBK,EAAKC,SAAS,SAACC,GACb,MAAO,CAACH,kBAAmBG,EAAUH,6FAKvC,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAD,CAAQR,oBAAqBS,KAAKT,sBAClCV,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,cAjBUC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a59fc571.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Home.css';\r\n\r\nconst home = () => (\r\n  <div className=\"home\">\r\n    <div className=\"home__welcome\">\r\n      <span className=\"home__welcome_text\">Kreatywne dzieci</span>\r\n      <span className=\"home__under-welcome_text\">„Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris facilisis porttitor orci quis maximus. Maecenas semper, nisi quis ultrices dictum, erat lorem tempor orci, non.”</span>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default home;","import React from 'react';\r\n\r\nimport './DrawerToggler.css';\r\n\r\nconst drawerToggler = props => (\r\n  <button className='side-drawer-toggle-button' onClick={props.click}>\r\n    <div className=\"side-drawer-toggle-button__line\"></div>\r\n    <div className=\"side-drawer-toggle-button__line\"></div>\r\n    <div className=\"side-drawer-toggle-button__line\"></div>\r\n  </button>\r\n);\r\n\r\nexport default drawerToggler;","import React from 'react';\r\n\r\nimport DrawerToggler from '../DrawerToggler/DrawerToggler';\r\n\r\nimport './Navbar.css';\r\n\r\nconst navbar = props => (\r\n  <header className=\"navbar\">\r\n    <nav className=\"navbar__navigation\">\r\n      <div className=\"navbar__toggle-button\">\r\n        <DrawerToggler click={props.drawerToggleHandler} />\r\n      </div>\r\n      <div className=\"navbar__navigation-items\">\r\n        <ul className=\"navbar__navigation-items_list\">\r\n          <li className=\"navbar__navigation-items_list-item\">O nas</li>\r\n          <li className=\"navbar__navigation-items_list-item\">Urodzinki</li>\r\n          <li className=\"navbar__navigation-items_list-item\">Kontakt</li>\r\n          <li className=\"navbar__navigation-items_list-item\">Plan zajęć</li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  </header>\r\n)\r\n\r\nexport default navbar;","import React from 'react';\r\n\r\nimport './Footer.css';\r\n\r\n\r\nconst Footer = () => {\r\n  return (\r\n  <div className=\"footer\">\r\n    <div className=\"footer__Content\">\r\n      <div className=\"footer__Content-text\">\r\n      Made by Damian Wasilewski\r\n      </div>\r\n    </div>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Home from './Components/Home/Home';\nimport Navbar from './Components/Navbar/Navbar';\nimport Footer from './Components/Footer/Footer';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    sideDrawerOpened: false\n  }\n\n  drawerToggleHandler = () => {\n    this.setState((prevState) => {\n      return {sideDrawerOpened: !prevState.sideDrawerOpened};\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar drawerToggleHandler={this.drawerToggleHandler}/>\n        <Home />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}